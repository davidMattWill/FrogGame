[gd_scene load_steps=14 format=3 uid="uid://csixy1vnmscgx"]

[ext_resource type="PackedScene" uid="uid://clspkafej47q5" path="res://player/player_character.tscn" id="3_sxach"]
[ext_resource type="Texture2D" uid="uid://bs5k763wlp5k8" path="res://imports/Assets/JumpBar/jump_bar_underneat.png" id="4_ogni1"]
[ext_resource type="Texture2D" uid="uid://be10avil15a67" path="res://imports/Assets/JumpBar/jump_bar_border.png" id="4_qalcr"]
[ext_resource type="Texture2D" uid="uid://bhn1ssp8dbul1" path="res://imports/Assets/JumpBar/jump_bar_progress.png" id="5_akr4a"]
[ext_resource type="Script" path="res://Levels/HealthUI_controller.gd" id="8_pbhce"]
[ext_resource type="Texture2D" uid="uid://dmj37gqoao2n6" path="res://imports/Assets/Environment/new-platform.png" id="9_mrbdh"]
[ext_resource type="PackedScene" uid="uid://dyqayj5kpvq5y" path="res://npc/snail.tscn" id="10_8x2u2"]
[ext_resource type="Texture2D" uid="uid://blvn0o06jkf4e" path="res://imports/Assets/Player/heart-empty.png" id="10_s8m77"]
[ext_resource type="Texture2D" uid="uid://oo0axtjejaa6" path="res://imports/Assets/Player/heart-full.png" id="11_xiofi"]
[ext_resource type="PackedScene" uid="uid://0n2ntf5is0aa" path="res://Lantern/lantern.tscn" id="14_xyewl"]

[sub_resource type="GDScript" id="GDScript_nsevk"]
script/source = "extends CharacterBody2D

# Constants for movement
const SPEED = 120
const JUMP_VELOCITY = -500
const KNOCKBACK_SPEED = 200
const JUMP_FROM_ROLL_VELOCITY = 500 

# Gravity from project settings for consistency with RigidBody nodes
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var direction: Vector2 = Vector2.ZERO
var slide_speed = 120  # Speed of sliding down the slope

# Node references
@onready var animation_tree: AnimationTree = $AnimationTree
@onready var state_machine: AnimationNodeStateMachinePlayback = animation_tree.get(\"parameters/playback\")
@onready var ray: RayCast2D = $RayCast2D
@onready var dust_scene = preload(\"res://player/dust_plume.tscn\")
@onready var jump_bar = $JumpBar

var anim_states = [
	\"idle\", \"hop_ready\", \"hop_up\", 
	\"hop_down\", \"hop_land\", 
	\"ready_roll_backward\", \"roll_backward\", 
	\"ready_roll_forward\", \"roll_forward\",
	\"hit\", \"dead\"]

var anim_conditions = [
	\"fall_from_roll\", \"hop_apex\", 
	\"hop_landing\", \"hop_start\", 
	\"jump_from_roll\", \"player_dead\", 
	\"player_dead_reset\", \"player_hit\", 
	\"roll_backward\", \"roll_forward\", \"hop_released\"]

# State flags
var getting_ready_to_hop: bool = false
var ready_to_hop: bool = false
var ready_to_land: bool = false
var landing: bool = false
var is_attacked: bool = false
var is_on_slope: bool = false
var jumping_from_roll: bool = false


var space_held: bool = false
var space_released: bool = false
var hold_time = 0.0
var max_hold_time = 0.5

signal health_changed(value)
var playerhealth = 3



func _ready():
	# Initialize animation tree and connect signal
	animation_tree.active = true
	animation_tree.connect(\"animation_finished\", _on_animation_finished)
	jump_bar.visible = false

func _process(delta):
	# Update animation parameters each frame
	update_animation_parameters(delta)
	#print_flags()


func print_flags():
	print(\"getting ready to hop: \", getting_ready_to_hop)
	print(\"ready to hop: \", ready_to_hop)
	print(\"ready to land:\", ready_to_land)
	print(\"landing: \", landing)
	print(\"is on slope: \", is_on_slope)

func _physics_process(delta):
	# Get movement input
	direction = Input.get_vector(\"ui_left\", \"ui_right\", \"ui_up\", \"ui_down\").normalized()
	
	if space_held:
		hold_time += delta
		hold_time = min(hold_time, max_hold_time)
		jump_bar.value = (hold_time / max_hold_time) * 100
		
	# Apply gravity when not on floor
	if not is_on_floor():
		velocity.y += gravity * delta
	
	# Perform jump when ready
	if ready_to_hop and space_released:
		velocity.y = JUMP_VELOCITY * (hold_time / max_hold_time)
		ready_to_hop = false
		space_released = false
		_set_animation_conditions_true(['hop_released'])
	
	# Handle horizontal movement
	if direction != Vector2.ZERO and not landing and not getting_ready_to_hop and not is_attacked and not is_on_slope and not jumping_from_roll:
		velocity.x = direction.x * SPEED
	else:
		if not is_attacked and not jumping_from_roll:
			velocity.x = move_toward(velocity.x, 0, SPEED * delta)
	if is_on_floor() and not is_attacked and not is_on_slope:
		velocity.x = 0
		
	if is_on_floor() and is_attacked:
		var frames: Sprite2D = $player_frames
		#make player fall in correct direction with correct orientation
		if !frames.flip_h:
			velocity = Vector2(-KNOCKBACK_SPEED, -KNOCKBACK_SPEED)
		else:
			velocity = Vector2(KNOCKBACK_SPEED, -KNOCKBACK_SPEED)
	
	if is_on_slope and jumping_from_roll:
		var wall_normal = get_wall_normal()
		velocity = wall_normal.normalized() * JUMP_FROM_ROLL_VELOCITY
		animation_tree[\"parameters/\" + \"hop_up\" + \"/blend_position\"] = wall_normal
		
	# Apply movement
	move_and_slide()

# Helper to reset and set animation conditions
func _set_animation_conditions_true(conditions: Array):
	#clear all animation conditions
	for condition in anim_conditions:
		animation_tree.set(\"parameters/conditions/\" + condition, false)
	if conditions.is_empty():
		return
	#set passed conditions to tryue
	for condition in conditions:
		if condition in anim_conditions:
			animation_tree.set(\"parameters/conditions/\" + condition, true)
			
# Update animation parameters and states
func update_animation_parameters(delta):
	# Update blend positions for all animations if moving and not in specific states
	if direction != Vector2.ZERO and not getting_ready_to_hop and not landing and not is_on_slope and not jumping_from_roll:
		for state in anim_states:
			animation_tree[\"parameters/\" + state + \"/blend_position\"] = direction
		ray.rotation = -direction.x * 45

		# Handle slope landing
	if is_on_floor():
		var floor_normal = get_floor_normal()
		if floor_normal == Vector2.UP:
			is_on_slope = false
			jumping_from_roll = false
			if Input.is_action_just_pressed(\"ui_accept\") and not landing and not space_held and not is_attacked:
				_set_animation_conditions_true([\"hop_start\"])
				getting_ready_to_hop = true
				#initiate the jump sequence
				space_held = true
				hold_time = 0.0
				jump_bar.visible = true
			
			if ready_to_land and not is_attacked:
				_set_animation_conditions_true([\"hop_landing\"])
				ready_to_land = false
				landing = true
				
				# Spawn dust effect
				var dust = dust_scene.instantiate()
				dust.global_position = $Marker2D.global_position
				get_parent().add_child(dust)
			
			if is_on_floor() and is_attacked:
				_set_animation_conditions_true([\"player_dead\"])
				is_attacked = false

	if is_on_wall_only() and velocity.y > 0:
		var wall_normal = get_wall_normal()
		var wall_angle = wall_normal.angle()
		var angle_deg = rad_to_deg(wall_angle)
		#meaning we're on a slope
		print(angle_deg)
		if (angle_deg < -40 and angle_deg > -50) or (angle_deg < -130 and angle_deg > -140):
			if not is_on_slope and jumping_from_roll:
				jumping_from_roll = false
			is_on_slope = true
			if ray.is_colliding():
				_set_animation_conditions_true([\"roll_backward\"])
			else:
				_set_animation_conditions_true([\"roll_forward\"])
		
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_slope:
		jumping_from_roll = true
		_set_animation_conditions_true([\"jump_from_roll\"])
			
	
	if Input.is_action_just_released(\"ui_accept\") and space_held:
		space_held = false
		space_released = true
		jump_bar.visible = false
		
	# Handle falling and apex
	if not is_on_floor() and not is_on_wall():
		is_on_slope = false
		if not is_attacked:
			if velocity.y > 0: 
				_set_animation_conditions_true([\"hop_apex\", \"fall_from_roll\"])
			ready_to_land = true
	

func _on_animation_finished(anim: String):
	if anim in [\"hop_ready_l\", \"hop_ready_r\"]:
		getting_ready_to_hop = false
		ready_to_hop = true
	
	if anim in [\"hop_land_l\", \"hop_land_r\"]:
		landing = false


func _on_player_attacked():
	if not is_attacked:
		is_attacked = true
		var frames: Sprite2D = $player_frames
		#make player fall in correct direction with correct orientation
		if !frames.flip_h:
			animation_tree[\"parameters/\" + \"hit\" + \"/blend_position\"] = Vector2(1,0)
			animation_tree[\"parameters/\" + \"dead\" + \"/blend_position\"] = Vector2(1,0)
		else:
			animation_tree[\"parameters/\" + \"hit\" + \"/blend_position\"] = Vector2(-1,0)
			animation_tree[\"parameters/\" + \"dead\" + \"/blend_position\"] = Vector2(-1,0)
		
		playerhealth = playerhealth - 1
		emit_signal(\"health_changed\", playerhealth)
		_set_animation_conditions_true([\"player_hit\"])

	
	
"

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_3d0gj"]
texture = ExtResource("9_mrbdh")
0:0/0 = 0
0:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:0/0/physics_layer_0/angular_velocity = 0.0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0 = 0
1:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:0/0/physics_layer_0/angular_velocity = 0.0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0 = 0
2:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:0/0/physics_layer_0/angular_velocity = 0.0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:0/0 = 0
3:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:0/0/physics_layer_0/angular_velocity = 0.0
3:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0 = 0
4:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:0/0/physics_layer_0/angular_velocity = 0.0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:0/0 = 0
5:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:0/0/physics_layer_0/angular_velocity = 0.0
5:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:0/0 = 0
6:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:0/0/physics_layer_0/angular_velocity = 0.0
6:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
7:0/0 = 0
7:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:0/0/physics_layer_0/angular_velocity = 0.0
7:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
7:2/0 = 0
7:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:2/0/physics_layer_0/angular_velocity = 0.0
7:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0 = 0
6:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:2/0/physics_layer_0/angular_velocity = 0.0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0 = 0
5:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:2/0/physics_layer_0/angular_velocity = 0.0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0 = 0
4:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:2/0/physics_layer_0/angular_velocity = 0.0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0 = 0
3:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:2/0/physics_layer_0/angular_velocity = 0.0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0 = 0
2:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:2/0/physics_layer_0/angular_velocity = 0.0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0 = 0
1:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:2/0/physics_layer_0/angular_velocity = 0.0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0 = 0
0:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:2/0/physics_layer_0/angular_velocity = 0.0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:3/0 = 0
0:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:3/0/physics_layer_0/angular_velocity = 0.0
1:3/0 = 0
1:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:3/0/physics_layer_0/angular_velocity = 0.0
2:3/0 = 0
2:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:3/0/physics_layer_0/angular_velocity = 0.0
4:3/0 = 0
4:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:3/0/physics_layer_0/angular_velocity = 0.0
6:3/0 = 0
6:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:3/0/physics_layer_0/angular_velocity = 0.0
0:4/0 = 0
0:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:4/0/physics_layer_0/angular_velocity = 0.0
0:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:4/0 = 0
1:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:4/0/physics_layer_0/angular_velocity = 0.0
1:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:4/0 = 0
2:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:4/0/physics_layer_0/angular_velocity = 0.0
2:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:4/0 = 0
3:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:4/0/physics_layer_0/angular_velocity = 0.0
3:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:4/0 = 0
4:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:4/0/physics_layer_0/angular_velocity = 0.0
4:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:4/0 = 0
5:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:4/0/physics_layer_0/angular_velocity = 0.0
5:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:4/0 = 0
6:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:4/0/physics_layer_0/angular_velocity = 0.0
6:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
7:4/0 = 0
7:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:4/0/physics_layer_0/angular_velocity = 0.0
7:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
8:4/0 = 0
8:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
8:4/0/physics_layer_0/angular_velocity = 0.0
8:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:4/0 = 0
9:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
9:4/0/physics_layer_0/angular_velocity = 0.0
9:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:4/0 = 0
10:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:4/0/physics_layer_0/angular_velocity = 0.0
10:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:4/0 = 0
11:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
11:4/0/physics_layer_0/angular_velocity = 0.0
11:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:5/0 = 0
9:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
9:5/0/physics_layer_0/angular_velocity = 0.0
10:5/0 = 0
10:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:5/0/physics_layer_0/angular_velocity = 0.0
7:5/0 = 0
7:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:5/0/physics_layer_0/angular_velocity = 0.0
5:5/0 = 0
5:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:5/0/physics_layer_0/angular_velocity = 0.0
4:5/0 = 0
4:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:5/0/physics_layer_0/angular_velocity = 0.0
3:5/0 = 0
3:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:5/0/physics_layer_0/angular_velocity = 0.0
2:5/0 = 0
2:5/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:5/0/physics_layer_0/angular_velocity = 0.0
0:6/0 = 0
0:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:6/0/physics_layer_0/angular_velocity = 0.0
0:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:6/0 = 0
1:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:6/0/physics_layer_0/angular_velocity = 0.0
1:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:6/0 = 0
2:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:6/0/physics_layer_0/angular_velocity = 0.0
2:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:7/0 = 0
1:7/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:7/0/physics_layer_0/angular_velocity = 0.0
4:6/0 = 0
4:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:6/0/physics_layer_0/angular_velocity = 0.0
4:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:6/0 = 0
5:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:6/0/physics_layer_0/angular_velocity = 0.0
5:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:6/0 = 0
6:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:6/0/physics_layer_0/angular_velocity = 0.0
6:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:7/0 = 0
5:7/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:7/0/physics_layer_0/angular_velocity = 0.0
4:7/0 = 0
4:7/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:7/0/physics_layer_0/angular_velocity = 0.0
8:6/0 = 0
8:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
8:6/0/physics_layer_0/angular_velocity = 0.0
8:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:6/0 = 0
9:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
9:6/0/physics_layer_0/angular_velocity = 0.0
9:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:6/0 = 0
10:6/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:6/0/physics_layer_0/angular_velocity = 0.0
10:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:7/0 = 0
10:7/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:7/0/physics_layer_0/angular_velocity = 0.0
5:8/0 = 0
5:8/0/physics_layer_0/linear_velocity = Vector2(0, 0)
5:8/0/physics_layer_0/angular_velocity = 0.0
5:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
4:8/0 = 0
4:8/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:8/0/physics_layer_0/angular_velocity = 0.0
4:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(8, -8, 8, 8, -8, 8)
4:9/0 = 0
4:9/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:9/0/physics_layer_0/angular_velocity = 0.0
4:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
3:9/0 = 0
3:9/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:9/0/physics_layer_0/angular_velocity = 0.0
3:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(8, -8, 8, 8, -8, 8)
3:10/0 = 0
3:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:10/0/physics_layer_0/angular_velocity = 0.0
3:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
2:10/0 = 0
2:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:10/0/physics_layer_0/angular_velocity = 0.0
2:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(8, -8, 8, 8, -8, 8)
2:11/0 = 0
2:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
2:11/0/physics_layer_0/angular_velocity = 0.0
2:11/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
3:11/0 = 0
3:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
3:11/0/physics_layer_0/angular_velocity = 0.0
1:11/0 = 0
1:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:11/0/physics_layer_0/angular_velocity = 0.0
1:11/0/physics_layer_0/polygon_0/points = PackedVector2Array(8, -8, 8, 8, -8, 8)
1:12/0 = 0
1:12/0/physics_layer_0/linear_velocity = Vector2(0, 0)
1:12/0/physics_layer_0/angular_velocity = 0.0
1:12/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
0:12/0 = 0
0:12/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:12/0/physics_layer_0/angular_velocity = 0.0
0:12/0/physics_layer_0/polygon_0/points = PackedVector2Array(8, -8, 8, 8, -8, 8)
0:13/0 = 0
0:13/0/physics_layer_0/linear_velocity = Vector2(0, 0)
0:13/0/physics_layer_0/angular_velocity = 0.0
0:13/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, -8, 8)
6:8/0 = 0
6:8/0/physics_layer_0/linear_velocity = Vector2(0, 0)
6:8/0/physics_layer_0/angular_velocity = 0.0
6:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
7:8/0 = 0
7:8/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:8/0/physics_layer_0/angular_velocity = 0.0
7:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, 8, -8, 8)
7:9/0 = 0
7:9/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:9/0/physics_layer_0/angular_velocity = 0.0
7:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
8:9/0 = 0
8:9/0/physics_layer_0/linear_velocity = Vector2(0, 0)
8:9/0/physics_layer_0/angular_velocity = 0.0
8:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, 8, -8, 8)
8:10/0 = 0
8:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
8:10/0/physics_layer_0/angular_velocity = 0.0
8:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
9:10/0 = 0
9:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
9:10/0/physics_layer_0/angular_velocity = 0.0
9:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, 8, -8, 8)
9:11/0 = 0
9:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
9:11/0/physics_layer_0/angular_velocity = 0.0
9:11/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
10:11/0 = 0
10:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:11/0/physics_layer_0/angular_velocity = 0.0
10:11/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, 8, -8, 8)
10:12/0 = 0
10:12/0/physics_layer_0/linear_velocity = Vector2(0, 0)
10:12/0/physics_layer_0/angular_velocity = 0.0
10:12/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
11:12/0 = 0
11:12/0/physics_layer_0/linear_velocity = Vector2(0, 0)
11:12/0/physics_layer_0/angular_velocity = 0.0
11:12/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, 8, -8, 8)
11:13/0 = 0
11:13/0/physics_layer_0/linear_velocity = Vector2(0, 0)
11:13/0/physics_layer_0/angular_velocity = 0.0
11:13/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8)
8:11/0 = 0
8:11/0/physics_layer_0/linear_velocity = Vector2(0, 0)
8:11/0/physics_layer_0/angular_velocity = 0.0
7:10/0 = 0
7:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
7:10/0/physics_layer_0/angular_velocity = 0.0
4:10/0 = 0
4:10/0/physics_layer_0/linear_velocity = Vector2(0, 0)
4:10/0/physics_layer_0/angular_velocity = 0.0
14:4/0 = 0
14:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
14:4/0/physics_layer_0/angular_velocity = 0.0
14:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:3/0 = 0
14:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
14:3/0/physics_layer_0/angular_velocity = 0.0
14:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:2/0 = 0
14:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
14:2/0/physics_layer_0/angular_velocity = 0.0
14:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:1/0 = 0
14:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
14:1/0/physics_layer_0/angular_velocity = 0.0
14:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:0/0 = 0
14:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
14:0/0/physics_layer_0/angular_velocity = 0.0
14:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
15:0/0 = 0
15:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
15:0/0/physics_layer_0/angular_velocity = 0.0
15:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
16:0/0 = 0
16:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
16:0/0/physics_layer_0/angular_velocity = 0.0
16:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
17:0/0 = 0
17:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
17:0/0/physics_layer_0/angular_velocity = 0.0
17:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
18:0/0 = 0
18:0/0/physics_layer_0/linear_velocity = Vector2(0, 0)
18:0/0/physics_layer_0/angular_velocity = 0.0
18:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
18:1/0 = 0
18:1/0/physics_layer_0/linear_velocity = Vector2(0, 0)
18:1/0/physics_layer_0/angular_velocity = 0.0
18:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
18:2/0 = 0
18:2/0/physics_layer_0/linear_velocity = Vector2(0, 0)
18:2/0/physics_layer_0/angular_velocity = 0.0
18:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
18:3/0 = 0
18:3/0/physics_layer_0/linear_velocity = Vector2(0, 0)
18:3/0/physics_layer_0/angular_velocity = 0.0
18:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
18:4/0 = 0
18:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
18:4/0/physics_layer_0/angular_velocity = 0.0
18:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
17:4/0 = 0
17:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
17:4/0/physics_layer_0/angular_velocity = 0.0
17:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
16:4/0 = 0
16:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
16:4/0/physics_layer_0/angular_velocity = 0.0
16:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
15:4/0 = 0
15:4/0/physics_layer_0/linear_velocity = Vector2(0, 0)
15:4/0/physics_layer_0/angular_velocity = 0.0
15:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)

[sub_resource type="TileSet" id="TileSet_6pek7"]
physics_layer_0/collision_layer = 1
sources/4 = SubResource("TileSetAtlasSource_3d0gj")

[node name="main_level" type="Node2D"]

[node name="PlayerCharacter" parent="." instance=ExtResource("3_sxach")]
position = Vector2(-1261, -510)
floor_stop_on_slope = false
floor_max_angle = 0.436332
script = SubResource("GDScript_nsevk")

[node name="Camera2D" type="Camera2D" parent="PlayerCharacter"]

[node name="JumpBar" type="TextureProgressBar" parent="PlayerCharacter"]
offset_left = -16.0
offset_top = -16.0
offset_right = 16.0
offset_bottom = -8.0
texture_under = ExtResource("4_ogni1")
texture_over = ExtResource("4_qalcr")
texture_progress = ExtResource("5_akr4a")
metadata/_edit_use_anchors_ = true

[node name="TileMap" type="TileMap" parent="."]
texture_filter = 1
position = Vector2(289, 232)
tile_set = SubResource("TileSet_6pek7")
format = 2
layer_0/tile_data = PackedInt32Array(-2949219, 983044, 0, -2949218, 1048580, 0, -2949217, 1114116, 0, -2949216, 983044, 0, -2949215, 1048580, 0, -2949214, 1114116, 0, -2949222, 983044, 0, -2949221, 1048580, 0, -2949220, 1114116, 0, -2949225, 983044, 0, -2949224, 1048580, 0, -2949223, 1114116, 0, -2949213, 983044, 0, -2949212, 1048580, 0, -2949211, 1114116, 0, -3145833, 917508, 1, -3080297, 917508, 2, -3014761, 917508, 3, -3342441, 917508, 1, -3276905, 917508, 2, -3211369, 917508, 3, -3473513, 917508, 2, -3407977, 917508, 3, -2949210, 524292, 9, -2883674, 524292, 10, -2883673, 589828, 10, -2818137, 589828, 11, -2818136, 655364, 11, -2752600, 655364, 12, -2752599, 524292, 9, -2687063, 524292, 10, -2687062, 589828, 10, -2621526, 589828, 11, -2621525, 655364, 11, -2555989, 524292, 10, -2555988, 589828, 10, -2490452, 589828, 11, -2490451, 655364, 11, -2424915, 524292, 10, -2424914, 589828, 10, -2359378, 589828, 11, -2359377, 655364, 11, -2293841, 524292, 10, -2293840, 589828, 10, -2228304, 589828, 11, -2228303, 655364, 11, -2162767, 655364, 12, -2162766, 720900, 12, -2097230, 720900, 13, -2097229, 983044, 0, -2097228, 1048580, 0, -2097227, 1114116, 0, -2097226, 983044, 0, -2097225, 1048580, 0, -2097224, 1114116, 0, -2097223, 983044, 0, -2097222, 1048580, 0, -2097221, 1114116, 0, -2097220, 983044, 0, -2097219, 1048580, 0, -2097218, 1114116, 0, -2752586, 4, 2, -2687050, 4, 3, -2752585, 65540, 2, -2752584, 131076, 2, -2687048, 131076, 3, -2752583, 196612, 2, -2752582, 262148, 2, -2687046, 262148, 3, -2752581, 327684, 2, -2752580, 393220, 2, -2687044, 393220, 3, -2752579, 458756, 2, -3145791, 4, 6, -3145790, 65540, 6, -3080254, 65540, 7, -3145789, 131076, 6, -3407926, 4, 6, -3407925, 65540, 6, -3342389, 65540, 7, -3407924, 131076, 6, -3801133, 983044, 4, -3801132, 1048580, 4, -3801131, 1114116, 4, -3801130, 983044, 4, -3801129, 1048580, 4, -3801128, 1114116, 4, -3801127, 983044, 4, -3801126, 1048580, 4, -3801125, 1114116, 4, -3801124, 1179652, 4, -3997732, 1179652, 1, -3932196, 1179652, 2, -3866660, 1179652, 3, -4128804, 1179652, 2, -4063268, 1179652, 3, -2097217, 458756, 8, -2031681, 458756, 9, -2031680, 524292, 9, -1966144, 524292, 10, -1966143, 589828, 10, -1900607, 589828, 11, -1900606, 458756, 8, -1835070, 458756, 9, -1835069, 524292, 9, -1769533, 524292, 10, -1769532, 589828, 10, -1703996, 589828, 11, -1703995, 458756, 8, -1638459, 458756, 9, -1638458, 524292, 9, -1572922, 524292, 10, -1572921, 589828, 10, -1507385, 589828, 11, -1507384, 655364, 11, -1441848, 655364, 12, -1441847, 720900, 12, -1376311, 1179652, 1, -1376306, 917508, 0, -1376305, 1114116, 0, -1376304, 983044, 0, -1376303, 1048580, 0, -1376302, 1114116, 0, -1376301, 983044, 0, -1376300, 1048580, 0, -1376299, 1114116, 0, -1376298, 983044, 0, -1376297, 1048580, 0, -1376296, 1114116, 0, -1376295, 983044, 0, -1376294, 1048580, 0, -1376293, 1114116, 0, -1376292, 983044, 0, -1376291, 1048580, 0, -1376290, 1114116, 0, -1376289, 983044, 0, -1376288, 1048580, 0, -1376287, 1114116, 0, -1376286, 983044, 0, -1376285, 1048580, 0, -1376284, 1114116, 0, -1376283, 983044, 0, -1376282, 1048580, 0, -1376281, 1114116, 0, -1376280, 983044, 0, -1376279, 1048580, 0, -1376278, 1114116, 0, -1441813, 4, 12, -1376277, 4, 13, -1507348, 65540, 11, -1441812, 65540, 12, -1572883, 131076, 10, -1507347, 131076, 11, -1638418, 196612, 9, -1572882, 196612, 10, -1507346, 196612, 11, -1638417, 983044, 0, -1572881, 262148, 10, -1900555, 655364, 5, -1310775, 1179652, 2, -1245239, 1179652, 3, -1179703, 1179652, 1, -1114167, 1179652, 2, -1048631, 1179652, 3, -983094, 983044, 0, -983093, 1048580, 0, -983092, 1114116, 0, -983091, 983044, 0, -1310770, 917508, 1, -1245234, 917508, 2, -1179698, 917508, 1, -1114162, 917508, 2, -1048626, 917508, 3, -1638416, 1048580, 0, -1638415, 1114116, 0, -1638414, 983044, 0, -1638413, 1048580, 0, -1638412, 1114116, 0, -1638411, 983044, 0, -1638410, 1048580, 0, -1638409, 1114116, 0, -1703944, 4, 12, -1638408, 4, 13, -1703943, 4, 13, -1769479, 4, 12, -1835014, 65540, 11, -1769478, 65540, 12, -2031621, 917508, 1, -1966085, 917508, 2, -1900549, 917508, 3, -1835013, 262148, 9, -2228229, 917508, 1, -2162693, 917508, 2, -2097157, 917508, 3, -2424837, 917508, 1, -2359301, 917508, 2, -2293765, 917508, 3, -2621445, 917508, 1, -2555909, 917508, 2, -2490373, 917508, 3, -2818053, 917508, 1, -2752517, 917508, 2, -2686981, 917508, 3, -3014661, 917508, 1, -2949125, 917508, 2, -2883589, 917508, 3, -3211269, 917508, 1, -3145733, 917508, 2, -3080197, 917508, 3, -3407877, 917508, 1, -3342341, 917508, 2, -3276805, 917508, 3, -2686995, 917508, 0, -2621459, 917508, 1, -2555923, 917508, 2, -2490387, 917508, 3, -2424851, 917508, 4, -2686994, 983044, 0, -2424850, 983044, 4, -2686993, 1048580, 0, -2424849, 1048580, 4, -2686992, 1114116, 0, -2424848, 1114116, 4, -2686991, 1179652, 0, -2621455, 1179652, 1, -2555919, 1179652, 2, -2490383, 1179652, 3, -2424847, 1179652, 4, -3801136, 983044, 4, -3801135, 1048580, 4, -3801134, 1114116, 4, -3801137, 917508, 4, -3866673, 917508, 0, -3866672, 983044, 0, -3866671, 1048580, 0, -3866670, 1114116, 0, -3866669, 983044, 0, -3866668, 1048580, 0, -3866667, 1114116, 0, -3932202, 4, 12, -3866666, 4, 13, -3997737, 65540, 11, -3932201, 65540, 12, -4063272, 131076, 10, -3997736, 131076, 11, -4063271, 196612, 10, -3997735, 196612, 11, -4128817, 4, 6, -4128816, 65540, 6, -4063280, 65540, 7, -4128815, 131076, 6, -3276842, 4, 4, -3276841, 65540, 4, -3276840, 131076, 4, -3211304, 131076, 5, -3276839, 196612, 4, -3211303, 196612, 5, -3276838, 262148, 4, -3211302, 262148, 5, -3276837, 327684, 4, -3211301, 327684, 5, -3276836, 393220, 4, -3276835, 458756, 4, -3211299, 458756, 5, -3276834, 524292, 4, -3276833, 589828, 4, -3211297, 589828, 5, -3276832, 655364, 4, -3211296, 655364, 5, -3276831, 720900, 4, -3670045, 4, 6, -3670044, 65540, 6, -3604508, 65540, 7, -3670043, 131076, 6, -3932194, 4, 6, -3932193, 65540, 6, -3866657, 65540, 7, -3932192, 131076, 6, -3670121, 917508, 1, -3604585, 917508, 2, -3539049, 917508, 3, -3866729, 917508, 1, -3801193, 917508, 2, -3735657, 917508, 3, -4063337, 917508, 1, -3997801, 917508, 2, -3932265, 917508, 3, -4259945, 917508, 1, -4194409, 917508, 2, -4128873, 917508, 3, -4456553, 917508, 1, -4391017, 917508, 2, -4325481, 917508, 3, -4653161, 917508, 1, -4587625, 917508, 2, -4522089, 917508, 3, -4849769, 917508, 1, -4784233, 917508, 2, -4718697, 917508, 3, -5046377, 917508, 1, -4980841, 917508, 2, -4915305, 917508, 3, -1966128, 983044, 4, -1966127, 1048580, 4, -1966126, 1114116, 4, -1966125, 983044, 4, -1966124, 1048580, 4, -1966123, 1114116, 4, -1966122, 983044, 4, -1966121, 1048580, 4, -1966120, 1114116, 4, -1966119, 983044, 4, -1966118, 1048580, 4, -1966117, 1114116, 4, -1966116, 983044, 4, -1966115, 1048580, 4, -1966129, 917508, 4, -2162737, 917508, 1, -2097201, 917508, 2, -2031665, 917508, 3, -2228273, 917508, 0, -2228272, 983044, 0, -2228271, 1048580, 0, -2228270, 1114116, 0, -2228269, 983044, 0, -2228268, 1048580, 0, -2228267, 1114116, 0, -2228266, 983044, 0, -2228265, 1048580, 0, -2228264, 1114116, 0, -2228263, 983044, 0, -2228262, 1048580, 0, -2228261, 1114116, 0, -1966114, 1179652, 4, -2097186, 1179652, 2, -2031650, 1179652, 3, -2097185, 1179652, 0, -2031649, 1179652, 1, -1966113, 1179652, 2, -1900577, 1179652, 3, -1835041, 1179652, 1, -1769505, 1179652, 2, -1703969, 1179652, 3, -1703968, 983044, 4, -1703967, 1048580, 4, -1703966, 1114116, 4, -1703965, 983044, 4, -1703964, 1048580, 4, -1703963, 1114116, 4, -1703962, 983044, 4, -1703961, 1048580, 4, -1703960, 1179652, 4, -2228260, 983044, 0, -2228259, 1048580, 0, -2228258, 1114116, 0, -2228257, 983044, 0, -2228256, 1048580, 0, -2228255, 1114116, 0, -2228254, 983044, 0, -2228253, 1048580, 0, -2228252, 1114116, 0, -2228251, 1179652, 0, -2162715, 1179652, 1, -2097179, 1179652, 2, -2031643, 1179652, 3, -1966107, 1179652, 2, -1900570, 983044, 4, -1900571, 1179652, 3, -1900569, 1048580, 4, -1900568, 1114116, 4, -1835032, 1179652, 1, -1769496, 1179652, 2)

[node name="UICanvasLayer" type="CanvasLayer" parent="."]

[node name="HealthUI" type="Control" parent="UICanvasLayer"]
layout_mode = 3
anchors_preset = 0
offset_right = 36.0
offset_bottom = 11.0
scale = Vector2(2, 2)
script = ExtResource("8_pbhce")
metadata/_edit_use_anchors_ = true

[node name="HealthEmpty" type="TextureRect" parent="UICanvasLayer/HealthUI"]
layout_mode = 0
offset_right = 36.0
offset_bottom = 11.0
texture = ExtResource("10_s8m77")
stretch_mode = 1
metadata/_edit_use_anchors_ = true

[node name="HealthFull" type="TextureRect" parent="UICanvasLayer/HealthUI"]
layout_mode = 1
offset_right = 36.0
offset_bottom = 11.0
texture = ExtResource("11_xiofi")
expand_mode = 1
stretch_mode = 1
metadata/_edit_use_anchors_ = true

[node name="Enemies" type="Node2D" parent="."]

[node name="Snail" parent="Enemies" instance=ExtResource("10_8x2u2")]
position = Vector2(-110, -126)

[node name="Snail2" parent="Enemies" instance=ExtResource("10_8x2u2")]
position = Vector2(-460, -126)

[node name="Lantern" parent="." instance=ExtResource("14_xyewl")]
position = Vector2(-1307, -504)
